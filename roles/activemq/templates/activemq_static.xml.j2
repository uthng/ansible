<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
    Create a dynamic network of brokers
    For more information, see:

    http://activemq.apache.org/networks-of-brokers.html

    To run this example network of ActiveMQ brokers run

    $ bin/activemq console xbean:examples/conf/activemq-dynamic-network-broker1.xml

    and

    $ bin/activemq console xbean:examples/conf/activemq-dynamic-network-broker2.xml

    in separate consoles
 -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="{{ activemq_broker_name }}" dataDirectory="${activemq.data}">

        <!-- Destination specific policies using destination names or wildcards -->
        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry queue=">" producerFlowControl="{{ activemq_producer_flow_control }}" memoryLimit="{{ activemq_producer_control_limit }}">
                        <deadLetterStrategy>
                          <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
                        </deadLetterStrategy>
                    </policyEntry>
                    <policyEntry topic=">" producerFlowControl="{{ activemq_producer_flow_control }}" memoryLimit="{{ activemq_producer_control_limit }}">
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!-- Use the following to configure how ActiveMQ is exposed in JMX -->
        <managementContext>
            <managementContext createConnector="true"/>
        </managementContext>

{% if activemq_broker_masters is defined and activemq_broker_masters != '' %}
        <!--
            Configure network connector to use multicast protocol
            For more information, see

            http://activemq.apache.org/multicast-transport-reference.html
        -->
        <networkConnectors>
            <networkConnector uri="{{ activemq_network_type }}:({{ activemq_broker_masters }})" duplex="true" networkTTL="3" decreaseNetworkConsumerPriority="true" />
        </networkConnectors>
{% endif %}

        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/{{ activemq_broker_name }}/kahadb"/>
        </persistenceAdapter>

        <!--  The maximum amount of space the broker will use before slowing down producers -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="{{ activemq_usage_memory }}"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="{{ activemq_usage_store }}"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="{{ activemq_usage_temp }}"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors ActiveMQ will listen to
            Configure discovery URI to use multicast protocol
        -->
        <transportConnectors>
{% if activemq_tcp is defined and activemq_tcp != '' %}
            <transportConnector
                name="openwire"
                uri="tcp://{{ activemq_bindip }}:{{ activemq_tcp }}"
                updateClusterClients="true"
                rebalanceClusterClients="true"
                updateClusterClientsOnRemove="true"
                enableStatusMonitor="true" />
{% endif %}
{% if activemq_stomp is defined and activemq_stomp != '' %}
            <transportConnector
                name="stomp"
                uri="stomp://{{ activemq_bindip }}:{{ activemq_stomp }}"
                updateClusterClients="true"
                rebalanceClusterClients="true"
                updateClusterClientsOnRemove="true"
                enableStatusMonitor="true" />
{% endif %}
{% if activemq_mqtt is defined and activemq_mqtt != '' %}
            <transportConnector
                name="mqtt"
                uri="mqtt://{{ activemq_bindip }}:{{ activemq_mqtt }}"
                updateClusterClients="true"
                rebalanceClusterClients="true"
                updateClusterClientsOnRemove="true"
                enableStatusMonitor="true" />
{% endif %}
{% if activemq_amq is defined and activemq_amq != '' %}
            <transportConnector
                name="amq"
                uri="amq://{{ activemq_bindip }}:{{ activemq_mqtt }}"
                updateClusterClients="true"
                rebalanceClusterClients="true"
                updateClusterClientsOnRemove="true"
                enableStatusMonitor="true" />
{% endif %}
        </transportConnectors>

	<!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos
        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="jetty.xml"/>

</beans>
